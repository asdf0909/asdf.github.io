#slip1Q1_2
 #write py code to repeat the string 9 times using the string operator'*'.
 #ques)Python
 s1="python  "
 print(s1*9)
output=python python python python python python python python python
#ques)Mathematics
 s2="Mathematics "
 print(s2*9)
output=Mathematics Mathematics Mathematics Mathematics Mathematics Mathematics Mathematics Mathematics Mathematics

 #Q3 square of number from 1 to 10.

for n in range(1,11):
	print(n**2)

output=
1
4
9
16
25
36
49
64
81
100


 #slipno2Q_1madla2
#a
 string1="Hello "
string2="world"
 print(string1+string2)
output=
Hello world

#b
 string1="Good"
string2="Morning"
 print(string1+string2)
output=
GoodMorning

#3write code to generate square 1 to 30
sum=0
n=1
while n<=30:
     sum=sum+n
    n=n+1
     print("sum of first ",n-1,"natural numbers",sum)

Microsoft Windows [Version 10.0.19044.2364]
(c) Microsoft Corporation. All rights reserved.

C:\Users\admin>py
Python 3.11.1 (tags/v3.11.1:a7a450f, Dec  6 2022, 19:58:39) [MSC v.1934 64 bit (AMD64)] on win32
Type "help", "copyright", "credits" or "license" for more information.
>>> from sympy import*
>>>
>>> eye(5)
Matrix([
[1, 0, 0, 0, 0],
[0, 1, 0, 0, 0],
[0, 0, 1, 0, 0],
[0, 0, 0, 1, 0],
[0, 0, 0, 0, 1]])
>>> eye(5,10)
Matrix([
[1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
[0, 1, 0, 0, 0, 0, 0, 0, 0, 0],
[0, 0, 1, 0, 0, 0, 0, 0, 0, 0],
[0, 0, 0, 1, 0, 0, 0, 0, 0, 0],
[0, 0, 0, 0, 1, 0, 0, 0, 0, 0]])
>>> ones(4)
Matrix([
[1, 1, 1, 1],
[1, 1, 1, 1],
[1, 1, 1, 1],
[1, 1, 1, 1]])
>>> ones(4,6)
Matrix([
[1, 1, 1, 1, 1, 1],
[1, 1, 1, 1, 1, 1],
[1, 1, 1, 1, 1, 1],
[1, 1, 1, 1, 1, 1]])
>>> diag(5,6,7)
Matrix([
[5, 0, 0],
[0, 6, 0],
[0, 0, 7]])
>>> zeros(7,3)
Matrix([
[0, 0, 0],
[0, 0, 0],
[0, 0, 0],
[0, 0, 0],
[0, 0, 0],
[0, 0, 0],
[0, 0, 0]])
>>>
>>>
>>> ones(5,4)
Matrix([
[1, 1, 1, 1],
[1, 1, 1, 1],
[1, 1, 1, 1],
[1, 1, 1, 1],
[1, 1, 1, 1]])
>>>
>>>
>>> eye(10)
Matrix([
[1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
[0, 1, 0, 0, 0, 0, 0, 0, 0, 0],
[0, 0, 1, 0, 0, 0, 0, 0, 0, 0],
[0, 0, 0, 1, 0, 0, 0, 0, 0, 0],
[0, 0, 0, 0, 1, 0, 0, 0, 0, 0],
[0, 0, 0, 0, 0, 1, 0, 0, 0, 0],
[0, 0, 0, 0, 0, 0, 1, 0, 0, 0],
[0, 0, 0, 0, 0, 0, 0, 1, 0, 0],
[0, 0, 0, 0, 0, 0, 0, 0, 1, 0],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 1]])
>>>
>>>
>>>
>>>
>>> A=Matrix([-1,1,0],[8,5,2][2,-6,2]])
  File "<stdin>", line 1
    A=Matrix([-1,1,0],[8,5,2][2,-6,2]])
                                     ^


>>> A=Matrix([[-1,1,0],[8,5,2],[2,-6,2]])
>>> b=Matrix([[9,0,3],[1,4,1],[1,0,-1]])
>>>
>>>
>>> 2A+b
  File "<stdin>", line 1
    2A+b
    ^
SyntaxError: invalid decimal literal
>>> A=Matrix([[-1,1,0],[8,5,2],[2,-6,2]])
>>> B=Matrix([[9,0,3],[1,4,1],[1,0,-1]])
>>> 2A+B
  File "<stdin>", line 1
    2A+B
    ^
SyntaxError: invalid decimal literal
>>> 2*A
Matrix([
[-2,   2, 0],
[16,  10, 4],
[ 4, -12, 4]])
>>> 2*A+B
Matrix([
[ 7,   2, 3],
[17,  14, 5],
[ 5, -12, 3]])
>>>
>>>
>>> A^-1
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: unsupported operand type(s) for ^: 'MutableDenseMatrix' and 'int'
>>> A**-1
Matrix([
[-11/17, 1/17, -1/17],
[  6/17, 1/17, -1/17],
[ 29/17, 2/17, 13/34]])
>>>
>>>
>>> B**3
Matrix([
[780,  0, 228],
[148, 64,  52],
[ 76,  0,  20]])
>>>
>>> B
Matrix([
[9, 0,  3],
[1, 4,  1],
[1, 0, -1]])
>>> A
Matrix([
[-1,  1, 0],
[ 8,  5, 2],
[ 2, -6, 2]])
>>> A*B
Matrix([
[-8,   4, -2],
[79,  20, 27],
[14, -24, -2]])
>>>
>>> A**T
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'T' is not defined
>>> A.T
Matrix([
[-1, 8,  2],
[ 1, 5, -6],
[ 0, 2,  2]])
>>> A.T+B.T
Matrix([
[8, 9,  3],
[1, 9, -6],
[3, 3,  1]])
>>> B.T
Matrix([
[9, 1,  1],
[0, 4,  0],
[3, 1, -1]])
>>>
>>>
>>>
>>> A=([[1,3,3],[2,3,3],[4,2,1]])
>>> A=Matrix([[1,3,3],[2,3,3],[4,2,1]])
>>> a.eigenvals
>>> A.eigenvals()
{
>>> a.eigenvects()
>>> A.eigenvects()
c=Matrix([[1,3,3],[2,3,3],[4,2,1]])
>>> c.eigenvals()
>>>
>>>
>>> c.eigenvects()

>>> c.is_diagonalizable()
True
>>>
>>> c.is_diagonalizable()
True
>>> c
Matrix([
[1, 3, 3],
[2, 3, 3],
[4, 2, 1]])
>>> B
Matrix([
[9, 0,  3],
[1, 4,  1],
[1, 0, -1]])
>>> B.is_diagonalizable()

>>> B.diagonalize()


